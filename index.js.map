{"mappings":";;;;;;;;;;;;AAAA,eAAe;AA4Bf,MAAM;IAIJ,YAAY,OAAoB,CAAE;aAF1B,eAAwC;QAG9C,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,IAAI;IACX;IAEQ,OAAa;QACnB,IAAI,CAAC,SAAS,mBAAmB,EAAE;YACjC,QAAQ,IAAI,CAAC;YACb;QACF;QAEA,IAAI,CAAC,gBAAgB;QACrB,IAAI,CAAC,oBAAoB;IAC3B;IAEQ,mBAAyB;QAC/B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,EAAE;QAErC,SAAS,gBAAgB,CAAC,SAAS,CAAC;YAClC,MAAM,SAAS,EAAE,MAAM;YACvB,MAAM,OAAO,OAAO,OAAO,CAAC;YAC5B,IAAI,QAAQ,IAAI,CAAC,cAAc,CAAC,OAAO;gBACrC,EAAE,cAAc;gBAChB,WAAW,IAAM,IAAI,CAAC,YAAY,CAAC,KAAK,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK;YAC5E;QACF;IACF;IAEQ,eAAe,IAAuB,EAAW;QACvD,OAAO,KAAK,IAAI,CAAC,UAAU,CAAC,OAAO,QAAQ,CAAC,MAAM;IACpD;IAEA,MAAc,aAAa,GAAW,EAAiB;QACrD,IAAI;YACF,MAAM,WAAW,MAAM,MAAM,KAAK;gBAAE,QAAQ;YAAM;YAClD,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,MAAM,SAAS,IAAI;YACnB,MAAM,MAAM,OAAO,eAAe,CAAC,MAAM;YACzC,QAAQ,GAAG,CAAC,CAAC,YAAY,EAAE,IAAI,CAAC;QAClC,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC,EAAE;QAC9C;IACF;IAEQ,uBAA6B;QACnC,SAAS,gBAAgB,CAAC,SAAS,CAAC;YAClC,MAAM,SAAS,EAAE,MAAM;YACvB,MAAM,OAAO,OAAO,OAAO,CAAC;YAC5B,IAAI,QAAQ,IAAI,CAAC,cAAc,CAAC,OAAO;gBACrC,EAAE,cAAc;gBAChB,IAAI,CAAC,gBAAgB,CAAC,KAAK,IAAI;YACjC;QACF;IACF;IAEA,MAAc,iBAAiB,GAAW,EAAiB;QACzD,MAAM,aAAa,SAAS,mBAAmB,CAAC;YAC9C,MAAM,WAAW,MAAM,MAAM;YAC7B,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,SAAS,IAAI,CAAC,SAAS,GAAG;YAC1B,SAAS,eAAe,CAAC,SAAS,GAAG;QACvC;QAEA,IAAI,CAAC,qBAAqB,CAAC;IAC7B;IAEQ,sBAAsB,UAA0B,EAAQ;QAC9D,MAAM,YAAE,QAAQ,SAAE,KAAK,UAAE,MAAM,EAAE,IAAI,YAAY,EAAE,KAAK,aAAa,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU;QACjG,MAAM,SAAS,CAAC;;mBAED,EAAE,SAAS,GAAG,EAAE,MAAM,GAAG,EAAE,OAAO,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,eAAe;;;mBAG9E,EAAE,SAAS,GAAG,EAAE,MAAM,GAAG,EAAE,OAAO,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,cAAc;;IAE5F,CAAC;QAED,IAAI,CAAC,YAAY,GAAG,SAAS,aAAa,CAAC;QAC3C,IAAI,CAAC,YAAY,CAAC,WAAW,GAAG;QAChC,SAAS,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY;QAE3C,WAAW,QAAQ,CAAC,IAAI,CAAC;YACvB,IAAI,IAAI,CAAC,YAAY,EAAE;gBACrB,IAAI,CAAC,YAAY,CAAC,MAAM;gBACxB,IAAI,CAAC,YAAY,GAAG;YACtB;QACF;IACF;IAEQ,kBAAkB,GAAoC,EAAU;QACtE,OAAO,OAAO,OAAO,CAAC,KACnB,GAAG,CAAC,CAAC,CAAC,KAAK,MAAM,GAAK,CAAC,EAAE,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,EAAE,MAAM,CAAC,CAAC,EAChE,IAAI,CAAC;IACV;IAEQ,iBAAiB,GAAW,EAAU;QAC5C,OAAO,IAAI,OAAO,CAAC,UAAU,CAAC,SAAW,CAAC,CAAC,EAAE,OAAO,WAAW,GAAG,CAAC;IACrE;IAEO,QAAQ,QAAsC,EAAE,OAA0B,EAAQ;QACvF,MAAM,WAAW,OAAO,aAAa,WAAW,SAAS,gBAAgB,CAAC,YAAY;QACtF,MAAM,YAAE,QAAQ,SAAE,KAAK,UAAE,MAAM,EAAE,IAAI,YAAY,EAAE,KAAK,aAAa,EAAE,GAAG;QAE1E,SAAS,OAAO,CAAC,CAAC,SAAS;YACzB,MAAM,YAAY,CAAC,cAAc,EAAE,MAAM,CAAC;YAC1C,QAAQ,EAAE,GAAG;YAEb,MAAM,cAAc,IAAI,CAAC,eAAe,CAAC,cAAc;YACvD,MAAM,eAAe,IAAI,CAAC,eAAe,CAAC,eAAe;YAEzD,MAAM,SAAS,CAAC;mBACH,EAAE,YAAY,IAAI,CAAC;UAC5B,EAAE,YAAY,KAAK,CAAC;;mBAEX,EAAE,aAAa,IAAI,CAAC;UAC7B,EAAE,aAAa,KAAK,CAAC;;SAEtB,EAAE,UAAU;qBACA,EAAE,SAAS,GAAG,EAAE,MAAM,GAAG,EAAE,OAAO;;SAE9C,EAAE,UAAU;qBACA,EAAE,SAAS,GAAG,EAAE,MAAM,GAAG,EAAE,OAAO,MAAM,EAAE,YAAY,IAAI,CAAC;;SAEvE,EAAE,UAAU;qBACA,EAAE,SAAS,GAAG,EAAE,MAAM,GAAG,EAAE,OAAO,MAAM,EAAE,aAAa,IAAI,CAAC;;MAE3E,CAAC;YAED,MAAM,eAAe,SAAS,aAAa,CAAC;YAC5C,aAAa,WAAW,GAAG;YAC3B,SAAS,IAAI,CAAC,WAAW,CAAC;YAE1B,qBAAqB;YACrB,QAAQ,KAAK,CAAC,WAAW,CAAC,yBAAyB;YAEnD,iDAAiD;YACjD,SAAS,gBAAgB,CAAC,uBAAuB;gBAC/C,QAAQ,KAAK,CAAC,WAAW,CAAC,yBAAyB,aAAa,IAAI;YACtE;YAEA,gCAAgC;YAChC,SAAS,gBAAgB,CAAC,wBAAwB;gBAChD,QAAQ,KAAK,CAAC,WAAW,CAAC,yBAAyB;YACrD;QACF;IACF;IAEQ,gBAAgB,UAA0F,EAAE,IAAkB,EAAmC;QACvK,MAAM,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,GAAG,GAAG,CAAC;QACtE,MAAM,aAAa,IAAI,CAAC,iBAAiB,CAAC,WAAW,IAAI;QACzD,MAAM,WAAW,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE;QACrD,MAAM,QAAQ,CAAC;aACN,EAAE,WAAW;WACf,EAAE,SAAS;IAClB,CAAC;QACD,OAAO;kBAAE;mBAAM;QAAM;IACvB;AACF;AAEe,kDAAc,OAAoB;IAC/C,OAAO,IAAI,2BAAK;AAClB;AAEA,yCAAK,OAAO,GAAG,CAAC,UAAwC;IACtD,MAAM,eAAe,IAAI,2BAAK;QAAE,UAAU;YAAE,UAAU;YAAO,OAAO;YAAI,OAAO;QAAE;QAAG,YAAY;IAAQ;IACxG,aAAa,OAAO,CAAC,UAAU;AACjC","sources":["src/index.ts"],"sourcesContent":["// src/index.ts\n\ninterface PrefetchOptions {\n  isActive: boolean;\n  event: string;\n  delay: number;\n}\n\ninterface TransitionOptions {\n  duration: number;\n  delay: number;\n  easing: string;\n  timeline: \"sequential\" | \"parallel\";\n  in: {\n    from: Record<string, string | number>;\n    to: Record<string, string | number>;\n  };\n  out: {\n    from: Record<string, string | number>;\n    to: Record<string, string | number>;\n  };\n}\n\ninterface XrefOptions {\n  prefetch: PrefetchOptions;\n  transition: TransitionOptions;\n}\n\nclass Xref {\n  private options: XrefOptions;\n  private styleElement: HTMLStyleElement | null = null;\n\n  constructor(options: XrefOptions) {\n    this.options = options;\n    this.init();\n  }\n\n  private init(): void {\n    if (!document.startViewTransition) {\n      console.warn(\"View Transitions API is not supported in this browser. Xref will not apply transitions.\");\n      return;\n    }\n\n    this.setupPrefetching();\n    this.setupViewTransitions();\n  }\n\n  private setupPrefetching(): void {\n    if (!this.options.prefetch.isActive) return;\n\n    document.addEventListener(\"click\", (e) => {\n      const target = e.target as HTMLElement;\n      const link = target.closest(\"a\");\n      if (link && this.isInternalLink(link)) {\n        e.preventDefault();\n        setTimeout(() => this.prefetchPage(link.href), this.options.prefetch.delay);\n      }\n    });\n  }\n\n  private isInternalLink(link: HTMLAnchorElement): boolean {\n    return link.href.startsWith(window.location.origin);\n  }\n\n  private async prefetchPage(url: string): Promise<void> {\n    try {\n      const response = await fetch(url, { method: \"GET\" });\n      const text = await response.text();\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(text, \"text/html\");\n      console.log(`Prefetched: ${url}`);\n    } catch (error) {\n      console.error(`Failed to prefetch ${url}:`, error);\n    }\n  }\n\n  private setupViewTransitions(): void {\n    document.addEventListener(\"click\", (e) => {\n      const target = e.target as HTMLElement;\n      const link = target.closest(\"a\");\n      if (link && this.isInternalLink(link)) {\n        e.preventDefault();\n        this.transitionToPage(link.href);\n      }\n    });\n  }\n\n  private async transitionToPage(url: string): Promise<void> {\n    const transition = document.startViewTransition(async () => {\n      const response = await fetch(url);\n      const text = await response.text();\n      document.body.innerHTML = text;\n      document.documentElement.scrollTop = 0;\n    });\n\n    this.applyTransitionStyles(transition);\n  }\n\n  private applyTransitionStyles(transition: ViewTransition): void {\n    const { duration, delay, easing, in: inTransition, out: outTransition } = this.options.transition;\n    const styles = `\n      ::view-transition-old(*) {\n        animation: ${duration}ms ${delay}ms ${easing} both ${this.createKeyframes(outTransition)};\n      }\n      ::view-transition-new(*) {\n        animation: ${duration}ms ${delay}ms ${easing} both ${this.createKeyframes(inTransition)};\n      }\n    `;\n\n    this.styleElement = document.createElement(\"style\");\n    this.styleElement.textContent = styles;\n    document.head.appendChild(this.styleElement);\n\n    transition.finished.then(() => {\n      if (this.styleElement) {\n        this.styleElement.remove();\n        this.styleElement = null;\n      }\n    });\n  }\n\n  private objectToCSSString(obj: Record<string, string | number>): string {\n    return Object.entries(obj)\n      .map(([key, value]) => `${this.camelToKebabCase(key)}: ${value};`)\n      .join(\" \");\n  }\n\n  private camelToKebabCase(str: string): string {\n    return str.replace(/[A-Z]/g, (letter) => `-${letter.toLowerCase()}`);\n  }\n\n  public animate(selector: string | NodeListOf<Element>, options: TransitionOptions): void {\n    const elements = typeof selector === \"string\" ? document.querySelectorAll(selector) : selector;\n    const { duration, delay, easing, in: inTransition, out: outTransition } = options;\n\n    elements.forEach((element, index) => {\n      const elementId = `xref-animated-${index}`;\n      element.id = elementId;\n\n      const inKeyframes = this.createKeyframes(inTransition, \"in\");\n      const outKeyframes = this.createKeyframes(outTransition, \"out\");\n\n      const styles = `\n        @keyframes ${inKeyframes.name} {\n          ${inKeyframes.rules}\n        }\n        @keyframes ${outKeyframes.name} {\n          ${outKeyframes.rules}\n        }\n        #${elementId} {\n          animation: ${duration}ms ${delay}ms ${easing} both var(--xref-animation-name);\n        }\n        #${elementId}::view-transition-new {\n          animation: ${duration}ms ${delay}ms ${easing} both ${inKeyframes.name};\n        }\n        #${elementId}::view-transition-old {\n          animation: ${duration}ms ${delay}ms ${easing} both ${outKeyframes.name};\n        }\n      `;\n\n      const styleElement = document.createElement(\"style\");\n      styleElement.textContent = styles;\n      document.head.appendChild(styleElement);\n\n      // Set initial styles\n      element.style.setProperty(\"--xref-animation-name\", \"none\");\n\n      // Apply animations when a view transition starts\n      document.addEventListener(\"startViewTransition\", () => {\n        element.style.setProperty(\"--xref-animation-name\", outKeyframes.name);\n      });\n\n      // Clean up after the transition\n      document.addEventListener(\"finishViewTransition\", () => {\n        element.style.setProperty(\"--xref-animation-name\", \"none\");\n      });\n    });\n  }\n\n  private createKeyframes(transition: { from: Record<string, string | number>; to: Record<string, string | number> }, type: \"in\" | \"out\"): { name: string; rules: string } {\n    const name = `xref-${type}-${Math.random().toString(36).substr(2, 9)}`;\n    const fromStyles = this.objectToCSSString(transition.from);\n    const toStyles = this.objectToCSSString(transition.to);\n    const rules = `\n      from { ${fromStyles} }\n      to { ${toStyles} }\n    `;\n    return { name, rules };\n  }\n}\n\nexport default function xref(options: XrefOptions): Xref {\n  return new Xref(options);\n}\n\nxref.animate = (selector: string | NodeListOf<Element>, options: TransitionOptions): void => {\n  const xrefInstance = new Xref({ prefetch: { isActive: false, event: \"\", delay: 0 }, transition: options });\n  xrefInstance.animate(selector, options);\n};\n"],"names":[],"version":3,"file":"index.js.map"}