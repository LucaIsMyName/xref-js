{"version":3,"file":"xref.umd.min.js","sources":["../src/prefetch.ts","../src/xref.ts"],"sourcesContent":["import { XrefOptions } from \"./xref\";\n\ninterface PrefetchOptions {\n  event?: string;\n  delay?: number;\n  selector?: string;\n  active?: boolean;\n}\n\nexport class Prefetcher {\n  private cache: Map<string, string> = new Map();\n  private options: PrefetchOptions;\n  private xrefOptions: XrefOptions;\n\n  /**\n   *\n   * @description Initializes the prefetcher\n   * with the given options.\n   */\n  constructor(options: PrefetchOptions, xrefOptions: XrefOptions) {\n    this.options = options;\n    this.xrefOptions = xrefOptions;\n    this.init();\n  }\n\n  /**\n   * @description Initializes the prefetcher by\n   * adding an event listener to the document.\n   */\n  private init() {\n    if (!this.options.active) return;\n    document.addEventListener(this.options.event || \"mouseover\", this.handleEvent.bind(this));\n  }\n\n  /**\n   *\n   * @description Handles the event by checking if the target\n   * is an anchor element and if it should be prefetched.\n   */\n  private handleEvent(event: Event) {\n    const target = event.target as HTMLElement;\n    const link = target.closest(this.options.selector || \"a\") as HTMLAnchorElement | null;\n\n    if (link && this.shouldPrefetch(link)) {\n      setTimeout(() => this.prefetch(link.href), this.options.delay || 100);\n    }\n  }\n\n  /**\n   *\n   * @description Checks if the link should be prefetched.\n   * It should be prefetched if it's an anchor element, it's\n   * not the current page, and it's not already in the cache.\n   */\n  private shouldPrefetch(link: HTMLAnchorElement): boolean {\n    return !!(link.href && link.href.startsWith(window.location.origin) && link.href !== window.location.href && !this.cache.has(link.href));\n  }\n\n  /**\n   *\n   * @description Fetches the content of the given URL\n   * and stores it in the cache. If the fetch fails, it logs\n   * an error to the console.\n   */\n  private async prefetch(url: string) {\n    try {\n      const response = await fetch(url);\n      const text = await response.text();\n      this.cache.set(url, text);\n      this.xrefOptions.debug ? console.log(`Prefetched: ${url}`) : null;\n    } catch (error) {\n      this.xrefOptions.debug ? console.error(\"Failed to prefetch:\" + url, error) : null;\n    }\n  }\n\n  /**\n   *\n   * @description Gets the content of the given URL\n   * from the cache. If the content is not in the cache,\n   * it returns null. Otherwise, it returns the content.\n   * This method is used by the Xref instance to get the\n   * content of a URL before navigating to it.\n   */\n  public getContent(url: string): string | null {\n    return this.cache.get(url) || null;\n  }\n}\n\nexport function initPrefetcher(options: PrefetchOptions, xrefOptions: XrefOptions): Prefetcher {\n  return new Prefetcher(options, xrefOptions);\n}\n","import { Prefetcher, initPrefetcher } from \"./prefetch\";\n\nexport interface XrefOptions {\n  debug?: boolean;\n  updateHead?: boolean;\n  transition?: TransitionOptions;\n  prefetch?: PrefetchOptions;\n}\n\nexport interface PrefetchOptions {\n  active: boolean;\n  delay: number;\n  event: string;\n  selector?: string;\n}\n\nexport interface TransitionOptions {\n  duration?: number;\n  delay?: number;\n  easing?: string;\n  timeline?: \"sequential\" | \"parallel\";\n  in?: TransitionState;\n  out?: TransitionState;\n  callback?: TransitionCallbacks;\n  state?: TransitionState;\n  swapHtml?: string;\n}\n\nexport interface TransitionState {\n  from?: Record<string, string | number>;\n  to?: Record<string, string | number>;\n}\n\nexport interface AnimationState {\n  started: boolean;\n  playing: boolean;\n  paused: boolean;\n  finished: boolean;\n}\n\nexport interface TransitionCallbacks {\n  onEnter?: () => void;\n  onStart?: () => void;\n  onPlay?: () => void;\n  onPause?: () => void;\n  onFinish?: () => void;\n}\n\n/**\n * The main Xref class that handles\n * navigation and transitions.\n *\n * @returns The Xref instance.\n *\n * @description This is the main class that handles navigation and transitions.\n * It intercepts clicks on internal links, fetches the content of the linked page,\n * updates the document head and body, and performs transitions between the\n * old and new content. It also handles popstate events to support back\n * and forward navigation.\n */\nclass Xref {\n  private options: XrefOptions;\n  private styleElement: HTMLStyleElement;\n  private transitionCounter: number = 0;\n  private prefetcher: Prefetcher | null = null;\n  private animationState: AnimationState;\n\n  /**\n   * @description This is the constructor of the Xref class.\n   * It initializes the Xref instance with the given options,\n   * creates a style element to store the keyframes for transitions,\n   * and sets the initial animation state.\n   */\n  constructor(options: XrefOptions = {}) {\n    this.options = {\n      updateHead: true,\n      ...options,\n    };\n    this.styleElement = document.createElement(\"style\");\n    this.styleElement.setAttribute(\"data-xref\", \"true\");\n    document.head.appendChild(this.styleElement);\n    this.animationState = {\n      started: false,\n      playing: true,\n      paused: false,\n      finished: false,\n      ...(this.options.transition?.state as Partial<AnimationState>),\n    };\n    this.init();\n  }\n\n  /**\n   * @description This method initializes the Xref instance\n   * by intercepting clicks on internal links, handling popstate events,\n   * and initializing the prefetcher if prefetching is enabled.\n   */\n  private init() {\n    this.options.debug ? console.log(\"started -> init() Method\") : null;\n\n    this.interceptClicks();\n    this.handlePopState();\n\n    if (this.options.prefetch && this.options.prefetch.active) {\n      this.prefetcher = initPrefetcher(this.options.prefetch, this.options);\n    }\n  }\n\n  private currentKeyframeName: string | null = null;\n\n  /**\n   * @description This method creates keyframes\n   * for the given transition state\n   * and direction.\n   */\n  private createKeyframes(transitionState: TransitionState, direction: \"in\" | \"out\"): string {\n    const { from, to } = transitionState;\n    const keyframeName = `xref-${direction}-${++this.transitionCounter}`;\n\n    let keyframeCSS = `@keyframes ${keyframeName} {\n      from {\n        ${Object.entries(from || {})\n          .map(([key, value]) => `${this.camelToKebab(key)}: ${value};`)\n          .join(\" \")}\n      }\n      to {\n        ${Object.entries(to || {})\n          .map(([key, value]) => `${this.camelToKebab(key)}: ${value};`)\n          .join(\" \")}\n      }\n    }`;\n\n    this.options.debug ? console.log(\"Creating keyframe:\" + keyframeName) : null;\n    this.options.debug ? console.log(\"Keyframe CSS:\" + keyframeCSS) : null;\n\n    // Remove the previous keyframe if it exists\n    if (this.currentKeyframeName) {\n      this.removeKeyframes(this.currentKeyframeName);\n    }\n\n    // Append the new keyframe to the style element's content\n    this.styleElement.textContent = keyframeCSS;\n    this.currentKeyframeName = keyframeName;\n\n    this.options.debug ? console.log(\"Keyframe \" + keyframeName + \"appended to <style> element\") : null;\n    this.options.debug ? console.log(\"Current <style> content: \" + this.styleElement.textContent) : null;\n\n    return keyframeName;\n  }\n\n  /**\n   * @param keyframeName\n   * @description This method removes the keyframes\n   * with the given name from the style element.\n   */\n  private removeKeyframes(keyframeName: string) {\n    this.options.debug ? console.log(\"Removing keyframe: \" + keyframeName) : null;\n    this.styleElement.textContent = \"\";\n    this.options.debug ? console.log(\"Keyframe\" + keyframeName + \"removed\") : null;\n    this.options.debug ? console.log(\"Current <style> content after removal:\" + this.styleElement.textContent) : null;\n    this.currentKeyframeName = null;\n  }\n\n  /**\n   * @description This method intercepts clicks\n   * on internal links and prevents the default\n   * browser navigation behavior.\n   */\n  private interceptClicks() {\n    this.options.debug ? console.log(\"started -> interceptClicks() Method\") : null;\n\n    document.addEventListener(\"click\", (event) => {\n      const target = event.target as HTMLElement;\n      const anchor = target.closest(\"a\");\n      if (anchor && this.shouldIntercept(anchor as HTMLAnchorElement)) {\n        event.preventDefault();\n        this.runCallback(\"onEnter\");\n        this.navigate(anchor.href);\n      }\n    });\n  }\n\n  /**\n   * @description This method checks if the\n   * anchor should be intercepted based on\n   * the current URL and the anchor's href.\n   */\n  private shouldIntercept(anchor: HTMLAnchorElement): boolean {\n    this.options.debug ? console.log(\"started -> shouldIntercept() Method\") : null;\n\n    const currentUrl = new URL(window.location.href);\n    const linkUrl = new URL(anchor.href);\n\n    // Check if it's an internal link\n    const isSameOrigin = linkUrl.origin === currentUrl.origin;\n\n    // Check if it's not the current page or just a hash change\n    const isSamePage = linkUrl.pathname === currentUrl.pathname && linkUrl.search === currentUrl.search;\n    const isJustHashChange = isSamePage && linkUrl.hash !== currentUrl.hash;\n\n    // Intercept only if it's an internal link and not the same page or just a hash change\n    return isSameOrigin && !isSamePage && !isJustHashChange;\n  }\n\n  /**\n   * @description This method handles popstate events\n   * to support back and forward navigation.\n   */\n  private handlePopState() {\n    this.options.debug ? console.log(\"started -> handlePopState() Method\") : null;\n\n    window.addEventListener(\"popstate\", () => {\n      this.navigate(window.location.href, false);\n    });\n  }\n\n  /**\n   * @description This method navigates to the given URL\n   * and updates the page content. If prefetching is enabled\n   * and the content is already prefetched, it uses the\n   * prefetched content instead of fetching it again.\n   * If pushState is true, it updates the browser history.\n   */\n  public async navigate(url: string, pushState: boolean = true) {\n    this.options.debug ? console.log(\"started -> navigate() Method\") : null;\n\n    try {\n      let content: string | null = null;\n      if (this.prefetcher) {\n        content = this.prefetcher.getContent(url);\n      }\n\n      if (!content) {\n        content = await this.fetchPage(url);\n      }\n\n      if (content) {\n        if (pushState) {\n          history.pushState(null, \"\", url);\n        }\n        this.updatePage(content);\n      }\n    } catch (error) {\n      this.options.debug ? console.error(\"Navigation failed:\", error) : null;\n    }\n  }\n\n  /**\n   * @description This method fetches the content of the given URL\n   * and returns it as a string. It throws an error if the request fails.\n   */\n  private async fetchPage(url: string): Promise<string> {\n    this.options.debug ? console.log(\"started -> fetchPage() Method\") : null;\n\n    const response = await fetch(url);\n    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n    return await response.text();\n  }\n\n  /**\n   * @description This method updates the page content\n   * with the new content fetched from the server.\n   * It updates the head and body of the document\n   * based on the new content.\n   */\n  private updatePage(content: string) {\n    this.options.debug ? console.log(\"started -> updatePage() Method\") : null;\n\n    const parser = new DOMParser();\n    const newDoc = parser.parseFromString(content, \"text/html\");\n\n    this.updateHead(newDoc);\n    this.updateBody(newDoc);\n  }\n\n  /**\n   * @description This method updates the head of the document\n   * with the new head from the fetched content. It updates\n   * the title and other head elements based on the new content.\n   */\n  private updateHead(newDoc: Document) {\n    this.options.debug ? console.log(\"started -> updateHead() Method\") : null;\n\n    const oldHead = document.head;\n    const newHead = newDoc.head;\n\n    // Always update the title\n    document.title = newDoc.title;\n\n    // If updateHead is false, don't update anything else in the head\n    if (this.options.updateHead === false) {\n      return;\n    }\n\n    // Remove old elements except our style element and title\n    Array.from(oldHead.children).forEach((child) => {\n      if (child !== this.styleElement && child.tagName !== \"TITLE\") {\n        child.remove();\n      }\n    });\n\n    // Add new elements\n    Array.from(newHead.children).forEach((child) => {\n      if (child.tagName !== \"STYLE\" && child.tagName !== \"TITLE\") {\n        oldHead.appendChild(child.cloneNode(true));\n      }\n    });\n\n    this.options.debug ? console.log(\"Head updated, xref style element preserved\") : null;\n  }\n\n  /**\n   * @description This method updates the body of the document\n   * with the new body from the fetched content. It updates\n   * the content of the swapHtml element based on the new content.\n   * It also performs the transition between the old and new content.\n   */\n  private updateBody(newDoc: Document) {\n    this.options.debug ? console.log(\"started -> updateBody() Method\") : null;\n\n    const swapHtml = this.options.transition?.swapHtml || \"body\";\n    const oldElement = document.querySelector(swapHtml);\n    const newElement = newDoc.querySelector(swapHtml);\n\n    if (!oldElement) {\n      this.options.debug ? console.error(`Old document does not contain element: ${swapHtml}`) : null;\n      return;\n    }\n\n    if (!newElement) {\n      this.options.debug ? console.error(`New document does not contain element: ${swapHtml}`) : null;\n      return;\n    }\n\n    this.performTransition(oldElement as HTMLElement, newElement as HTMLElement);\n\n    window.scrollTo(0, 0);\n  }\n\n  /**\n   * @description This method performs the transition\n   * between the old and new content by applying the\n   * in and out transitions to the elements.\n   * It also handles the transition timeline, duration,\n   * delay, and easing.\n   */\n  private performTransition(oldElement: HTMLElement, newElement: HTMLElement) {\n    this.options.debug ? console.log(\"Started performTransition\") : null;\n    const transitionOptions = this.options.transition || {};\n    const duration = transitionOptions.duration || 300;\n    const delay = transitionOptions.delay || 0;\n    const easing = transitionOptions.easing || \"ease-in-out\";\n    const timeline = transitionOptions.timeline || \"sequential\";\n\n    let outTransition = transitionOptions.out;\n    let inTransition = transitionOptions.in;\n\n    // If no out transition is set, reverse the in transition\n    if (!outTransition && inTransition) {\n      outTransition = this.reverseTransition(inTransition);\n    }\n    // If no in transition is set, reverse the out transition\n    else if (!inTransition && outTransition) {\n      inTransition = this.reverseTransition(outTransition);\n    }\n\n    this.setTransitionState(\"started\", true);\n    this.runCallback(\"onStart\");\n\n    if (outTransition) {\n      this.options.debug ? console.log(\"Applying out transition\") : null;\n      this.applyTransition(oldElement, outTransition, duration, delay, easing, \"out\");\n    }\n\n    const applyInTransition = () => {\n      this.options.debug ? console.log(\"Applying in transition\") : null;\n      // Remove the \"out\" animation\n      oldElement.style.removeProperty(\"animation\");\n\n      oldElement.innerHTML = newElement.innerHTML;\n      Array.from(newElement.attributes).forEach((attr) => {\n        if (attr.name !== \"style\") {\n          oldElement.setAttribute(attr.name, attr.value);\n        }\n      });\n\n      if (inTransition) {\n        this.applyTransition(oldElement, inTransition, duration, 0, easing, \"in\");\n      }\n    };\n\n    if (timeline === \"sequential\") {\n      this.options.debug ? console.log(`Setting timeout for in transition: ${duration + delay}ms`) : null;\n      setTimeout(applyInTransition, duration + delay);\n    } else {\n      this.options.debug ? console.log(`Setting timeout for in transition: ${delay}ms (parallel)`) : null;\n      setTimeout(applyInTransition, delay);\n    }\n  }\n\n  /**\n   * @description This method reverses the given transition\n   * by swapping the from and to states. This is useful\n   * for creating the \"out\" transition from the \"in\" transition.\n   */\n  private reverseTransition(transition: TransitionState): TransitionState {\n    return {\n      from: transition.to,\n      to: transition.from,\n    };\n  }\n\n  /**\n   * @description This method applies the transition to the element\n   * by creating the keyframes, setting the animation properties,\n   * and cleaning up after the animation is complete.\n   */\n  private applyTransition(element: HTMLElement, transitionState: TransitionState, duration: number, delay: number, easing: string, direction: \"in\" | \"out\") {\n    const customEasings = {\n      easeInOut: \"cubic-bezier(0.42, 0, 0.58, 1)\",\n      easeIn: \"cubic-bezier(0.42, 0, 1, 1)\",\n      easeOut: \"cubic-bezier(0, 0, 0.58, 1)\",\n      linearDegressive: \"cubic-bezier(0.25, 0.1, 0.25, 1)\",\n      linearProgressive: \"cubic-bezier(0.1, 0.25, 1, 0.25)\",\n      easeInSine: \"cubic-bezier(0.47, 0, 0.745, 0.715)\",\n      easeOutSine: \"cubic-bezier(0.39, 0.575, 0.565, 1)\",\n      easeInOutSine: \"cubic-bezier(0.445, 0.05, 0.55, 0.95)\",\n      easeInQuad: \"cubic-bezier(0.55, 0.085, 0.68, 0.53)\",\n      easeOutQuad: \"cubic-bezier(0.25, 0.46, 0.45, 0.94)\",\n      easeInOutQuad: \"cubic-bezier(0.455, 0.03, 0.515, 0.955)\",\n      easeInCubic: \"cubic-bezier(0.55, 0.055, 0.675, 0.19)\",\n      easeOutCubic: \"cubic-bezier(0.215, 0.61, 0.355, 1)\",\n      easeInOutCubic: \"cubic-bezier(0.645, 0.045, 0.355, 1)\",\n    };\n\n    for (const [key, value] of Object.entries(customEasings)) {\n      if (easing === key) {\n        easing = value;\n      }\n    }\n\n    this.options.debug ? console.log(`Applying ${direction} transition`) : null;\n    const keyframeName = this.createKeyframes(transitionState, direction);\n    const animationCSS = `${keyframeName} ${duration}ms ${easing} ${delay}ms forwards`;\n\n    // Ensure we're setting the animation property correctly\n    element.style.setProperty(\"animation\", animationCSS);\n    this.options.debug ? console.log(\"Applied \" + direction + \" animation: \" + animationCSS) : null;\n    this.options.debug ? console.log(\"Current element style:\", element.style.cssText) : null;\n\n    // Force a reflow to ensure the animation is applied immediately\n    void element.offsetWidth;\n\n    this.setTransitionState(\"playing\", true);\n    this.runCallback(\"onPlay\");\n\n    const cleanup = () => {\n      this.options.debug ? console.log(`Animation end event fired for ${direction} transition`) : null;\n      element.style.removeProperty(\"animation\");\n\n      // Remove the keyframe immediately after the animation is complete\n      this.removeKeyframes(keyframeName);\n\n      if (direction === \"in\") {\n        Object.entries(transitionState.to || {}).forEach(([key, value]) => {\n          element.style.setProperty(this.camelToKebab(key), value as string);\n        });\n      }\n      this.options.debug ? console.log(\"Cleaned up \" + direction + \" animation\") : null;\n      this.options.debug ? console.log(\"Current element style after cleanup:\", element.style.cssText) : null;\n      element.removeEventListener(\"animationend\", cleanup);\n\n      this.setTransitionState(\"finished\", true);\n      this.runCallback(\"onFinish\");\n    };\n\n    element.addEventListener(\"animationend\", cleanup, { once: true });\n  }\n\n  /**\n   * @description This method sets the transition state\n   * based on the given key and value. This is useful\n   * for tracking the state of the transition.\n   */\n  private setTransitionState(key: keyof AnimationState, value: boolean) {\n    this.animationState[key] = value;\n  }\n\n  private runCallback(callbackName: keyof TransitionCallbacks) {\n    const callback = this.options.transition?.callback?.[callbackName];\n    if (callback && typeof callback === \"function\") {\n      callback();\n    }\n  }\n\n  /**\n   * @description This method starts the transition\n   * and sets the animation state accordingly.\n   */\n  public startTransition() {\n    this.setTransitionState(\"started\", true);\n    this.setTransitionState(\"playing\", true);\n    this.setTransitionState(\"paused\", false);\n    this.setTransitionState(\"finished\", false);\n    this.runCallback(\"onStart\");\n    this.runCallback(\"onPlay\");\n  }\n\n  /**\n   * @description This method pauses the transition\n   * and sets the animation state accordingly.\n   */\n  public pauseTransition() {\n    if (this.animationState.playing) {\n      this.setTransitionState(\"playing\", false);\n      this.setTransitionState(\"paused\", true);\n      this.runCallback(\"onPause\");\n\n      // Pause transition\n\n      const element = document.querySelector(this.options.transition?.swapHtml || \"body\");\n      if (element) {\n        element.style.animationPlayState = \"paused\";\n      }\n    }\n  }\n\n  /**\n   * @description This method resumes the transition\n   * and sets the animation state accordingly.\n   */\n  public resumeTransition() {\n    if (this.animationState.paused) {\n      this.setTransitionState(\"playing\", true);\n      this.setTransitionState(\"paused\", false);\n      this.runCallback(\"onPlay\");\n      // play transition\n\n      const element = document.querySelector(this.options.transition?.swapHtml || \"body\");\n      if (element) {\n        element.style.animationPlayState = \"running\";\n      }\n    }\n  }\n\n  /**\n   * @description This method finishes the transition\n   * and cleans up the animation\n   * */\n  public finishTransition() {\n    this.setTransitionState(\"playing\", false);\n    this.setTransitionState(\"paused\", false);\n    this.setTransitionState(\"finished\", true);\n    this.runCallback(\"onFinish\");\n  }\n\n  /**\n   * @description This method converts\n   * camel case to kebab case\n   */\n  public camelToKebab(str: string): string {\n    return str.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\n  }\n}\n\nfunction xref(options: XrefOptions = {}): Xref {\n  return new Xref(options);\n}\n\nexport default xref;\n"],"names":["Prefetcher","constructor","options","xrefOptions","this","cache","Map","init","active","document","addEventListener","event","handleEvent","bind","link","target","closest","selector","shouldPrefetch","setTimeout","prefetch","href","delay","startsWith","window","location","origin","has","url","response","fetch","text","set","debug","console","log","error","getContent","get","Xref","transitionCounter","prefetcher","currentKeyframeName","Object","assign","updateHead","styleElement","createElement","setAttribute","head","appendChild","animationState","started","playing","paused","finished","_a","transition","state","interceptClicks","handlePopState","createKeyframes","transitionState","direction","from","to","keyframeName","keyframeCSS","entries","map","key","value","camelToKebab","join","removeKeyframes","textContent","anchor","shouldIntercept","preventDefault","runCallback","navigate","currentUrl","URL","linkUrl","isSameOrigin","isSamePage","pathname","search","isJustHashChange","hash","pushState","content","fetchPage","history","updatePage","ok","Error","status","newDoc","DOMParser","parseFromString","updateBody","oldHead","newHead","title","Array","children","forEach","child","tagName","remove","cloneNode","swapHtml","oldElement","querySelector","newElement","performTransition","scrollTo","transitionOptions","duration","easing","timeline","outTransition","out","inTransition","in","reverseTransition","setTransitionState","applyTransition","applyInTransition","style","removeProperty","innerHTML","attributes","attr","name","element","customEasings","easeInOut","easeIn","easeOut","linearDegressive","linearProgressive","easeInSine","easeOutSine","easeInOutSine","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","animationCSS","setProperty","cssText","offsetWidth","cleanup","removeEventListener","once","callbackName","callback","_b","startTransition","pauseTransition","animationPlayState","resumeTransition","finishTransition","str","replace","toLowerCase"],"mappings":"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"}